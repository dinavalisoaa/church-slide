use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

// type table
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "type")]
pub struct Type {
    #[sea_orm(primary_key, auto_increment = true)]
    pub id: i32,
    #[sea_orm(column_type = "Text", not_null)]
    pub nom: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum TypeRelation {
    #[sea_orm(has_many = "super::categorie::Entity")]
    Categories,
}

impl Related<super::categorie::Entity> for Type {
    fn to() -> RelationDef {
        TypeRelation::Categories.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// categorie table
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "categorie")]
pub struct Categorie {
    #[sea_orm(primary_key, auto_increment = true)]
    pub id: i32,
    #[sea_orm(column_type = "Text", not_null)]
    pub nom: String,
    pub type_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum CategorieRelation {
    #[sea_orm(belongs_to = "super::type::Entity", from = "Column::TypeId", to = "super::type::Column::Id")]
    Type,
    #[sea_orm(has_many = "super::song::Entity")]
    Songs,
}

impl Related<super::type::Entity> for Categorie {
    fn to() -> RelationDef {
        CategorieRelation::Type.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// song table
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "song")]
pub struct Song {
    #[sea_orm(primary_key, auto_increment = true)]
    pub id: i32,
    #[sea_orm(column_type = "Text", not_null)]
    pub titre: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub reference: Option<String>,
    pub categorie_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum SongRelation {
    #[sea_orm(belongs_to = "super::categorie::Entity", from = "Column::CategorieId", to = "super::categorie::Column::Id")]
    Categorie,
    #[sea_orm(has_many = "super::verses::Entity")]
    Verses,
}

impl Related<super::categorie::Entity> for Song {
    fn to() -> RelationDef {
        SongRelation::Categorie.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// verses table
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "verses")]
pub struct Verses {
    #[sea_orm(primary_key, auto_increment = true)]
    pub id: i32,
    pub song_id: i32,
    #[sea_orm(column_type = "Text", nullable)]
    pub reference: Option<String>,
    #[sea_orm(column_type = "Text", not_null)]
    pub lyrics: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum VersesRelation {
    #[sea_orm(belongs_to = "super::song::Entity", from = "Column::SongId", to = "super::song::Column::Id")]
    Song,
}

impl Related<super::song::Entity> for Verses {
    fn to() -> RelationDef {
        VersesRelation::Song.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// program table
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "program")]
pub struct Program {
    #[sea_orm(primary_key, auto_increment = true)]
    pub id: i32,
    pub date: Date,
    #[sea_orm(column_type = "Text", not_null)]
    pub nom: String,
    pub template_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum ProgramRelation {
    #[sea_orm(has_many = "super::program_detail::Entity")]
    ProgramDetails,
}

impl Related<super::program_detail::Entity> for Program {
    fn to() -> RelationDef {
        ProgramRelation::ProgramDetails.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// transition_page table
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "transition_page")]
pub struct TransitionPage {
    #[sea_orm(primary_key, auto_increment = true)]
    pub id: i32,
    #[sea_orm(column_type = "Text", not_null)]
    pub titre: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub description: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub image: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum TransitionPageRelation {
    #[sea_orm(has_many = "super::program_detail::Entity")]
    ProgramDetails,
}

impl Related<super::program_detail::Entity> for TransitionPage {
    fn to() -> RelationDef {
        TransitionPageRelation::ProgramDetails.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// vakiteny_page table
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "vakiteny_page")]
pub struct VakitenyPage {
    #[sea_orm(primary_key, auto_increment = true)]
    pub id: i32,
    #[sea_orm(column_type = "Text", not_null)]
    pub nom: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum VakitenyPageRelation {
    #[sea_orm(has_many = "super::vakiteny_page_detail::Entity")]
    VakitenyPageDetails,
    #[sea_orm(has_many = "super::program_detail::Entity")]
    ProgramDetails,
}

impl ActiveModelBehavior for ActiveModel {}

// scriptures table
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "scriptures")]
pub struct Scriptures {
    #[sea_orm(primary_key, auto_increment = true)]
    pub id: i32,
    #[sea_orm(column_type = "Text", not_null)]
    pub boky: String,
    pub toko: i32,
    pub and_fin: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum ScripturesRelation {
    #[sea_orm(has_many = "super::vakiteny_page_detail::Entity")]
    VakitenyPageDetails,
}

impl Related<super::vakiteny_page_detail::Entity> for Scriptures {
    fn to() -> RelationDef {
        ScripturesRelation::VakitenyPageDetails.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// vakiteny_page_detail table
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "vakiteny_page_detail")]
pub struct VakitenyPageDetail {
    #[sea_orm(primary_key, auto_increment = true)]
    pub id: i32,
    pub vakiteny_page_id: i32,
    pub scripture_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum VakitenyPageDetailRelation {
    #[sea_orm(belongs_to = "super::vakiteny_page::Entity", from = "Column::VakitenyPageId", to = "super::vakiteny_page::Column::Id")]
    VakitenyPage,
    #[sea_orm(belongs_to = "super::scriptures::Entity", from = "Column::ScriptureId", to = "super::scriptures::Column::Id")]
    Scripture,
}

impl Related<super::vakiteny_page::Entity> for VakitenyPageDetail {
    fn to() -> RelationDef {
        VakitenyPageDetailRelation::VakitenyPage.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

// program_detail table
#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "program_detail")]
pub struct ProgramDetail {
    #[sea_orm(primary_key, auto_increment = true)]
    pub id: i32,
    pub song_id: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub verses: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub background_image: Option<String>,
    pub transition_page_id: Option<i32>,
    pub vakiteny_page_id: Option<i32>,
    pub fanekena_id: Option<i32>,
    pub ordre: i32,
    pub template_id: Option<i32>,
    pub program_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum ProgramDetailRelation {
    #[sea_orm(belongs_to = "super::song::Entity", from = "Column::SongId", to = "super::song::Column::Id")]
    Song,
    #[sea_orm(belongs_to = "super::transition_page::Entity", from = "Column::TransitionPageId", to = "super::transition_page::Column::Id")]
    TransitionPage,
    #[sea_orm(belongs_to = "super::vakiteny_page::Entity", from = "Column::VakitenyPageId", to = "super::vakiteny_page::Column::Id")]
    VakitenyPage,
    #[sea_orm(belongs_to = "super::program::Entity", from = "Column::ProgramId", to = "super::program::Column::Id")]
    Program,
}

impl ActiveModelBehavior for ActiveModel {}